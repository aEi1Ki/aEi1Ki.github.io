{"name":"Mr. Nobody's blog","tagline":"welcome to my blog","body":"### Welcome to my new blog.\r\n原文链接:http://www.cnblogs.com/eric-z/p/5028243.html\r\n     上周五写了一个实现原理篇，在评论中看到有朋友也遇到了我的问题，真的是有种他乡遇知己的感觉，整个系列我一定会坚持写完，并在最后把代码开源到git中。上一篇文章很多人看了以后，都表示不解，觉得不知道我到底要干什么，可能就像隔行如隔山吧，就像做移动端开发的人很少去考虑分布式中的通信一样。大家都知道模块化，但模块化的思路有很多，我的只是其中一种，也许你看到最后会觉得这种思路在经过不断地演化后会成为一种很好的解决方案，当然这离不开以后大家对代码及思想的贡献。\r\n　　好了不扯了，还是回到主题上来吧....\r\n　　沙箱是什么？怎么用呢？\r\n　沙箱说白了就是插件、模块运行的环境，有点像docker又不像（哈哈）。沙箱主要由两部分组成：沙箱管道和沙箱启动器（为了显得高大上一些，就起了两个难以理解的名字），还有一个以后为功能做铺垫的实体类——controller/action 封包类\r\n　　首先贴一下这个实体类的代码：\r\n\r\n`/// <summary>controller/action 封包类\r\n /// </summary>\r\n public class CAModel\r\n {\r\n public string ControllerName{get;set;}\r\n public string ActionName{get;set;}\r\n public string UrlPath { get; set; }\r\n /// <summary>构造\r\n /// </summary>\r\n /// <param name=\"controllerName\">controller 全名（带命名空间）</param>\r\n /// <param name=\"actionName\">action 全名（不带参数）</param>\r\n public CAModel(string controllerName,string actionName)\r\n {\r\n ControllerName=controllerName;\r\n ActionName=actionName;\r\n UrlPath = controllerName.Replace(\".Areas.\", \"/\").Replace(\".Controllers.\", \"/\");//controller转Url\r\n if (UrlPath.EndsWith(\"Controller\"))\r\n {\r\n UrlPath = string.Format(\"/{0}/{1}\", UrlPath.Substring(0, UrlPath.Length - 10),actionName);\r\n }\r\n }\r\n public CAModel()\r\n { \r\n }\r\n }`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}